"use strict";

const { MongoClient, MongoSystemError, Double } = require("mongodb");
require("dotenv").config();
const { MONGO_URI, CLOUDINARY_URL, API_KEY, API_SECRET} = process.env;
const { v4: uuidv4 } = require("uuid");
const { runInNewContext } = require("vm");

const cloudinary = require("cloudinary").v2;

let fs = require('fs');
let uploads = {};


cloudinary.config({
  cloud_name: "sample",
  api_key: API_KEY,
  api_secret: API_SECRET,
  secure: true,
});


const options = {
  useNewUrlParser: true,
  useUnifiedTopology: true,
};

///handlers

//// add user
const addUser = async (req, res) => {
    const { firstName, lastName, email, password} = req.body;
  console.log(req.body)
    const newUser = {
      _id: uuidv4(),
      ...req.body,
    };
    const client = new MongoClient(MONGO_URI, options);
    try {
      await client.connect();
      console.log("connected")
      const db = client.db("AudioPlacebo");
      //   add user
      const insertResult = await db.collection("users").insertOne(newUser);
    
      if (insertResult) {
        return res.status(200).json({ status: 200, message: newUser });
      } else {
        return res
          .status(400)
          .json({ status: 400, message: "Cannot submit form" });
      }
    } catch (err) {
      console.log(err.mesage);
    } finally {
      await client.close();
    }
  };
  

const getUserById = async (req, res) => {
const id = req.params.id
console.log(id)
const client = new MongoClient(MONGO_URI, options);

try {
  await client.connect();
  console.log("connected")
  const db = client.db("AudioPlacebo")
  const profileId = await db.collection("users").findOne({_id: id})
  console.log(profileId)
  if (profileId) {
    return res.status(200).json({ status: 200, message: "hello" });
  } else {
    return res
      .status(400)
      .json({ status: 400, message: "user not found" });
  }    } catch (err){console.log(err)}
  
}



//login


const getUserByPassword = async (req, res) => {

  const {firstName, password} = req.body
  console.log(req.body.password)
  const client = new MongoClient(MONGO_URI, options);

    try {
      await client.connect();
      console.log("connected")
      const db = client.db("AudioPlacebo");

// /validation 

const matchUser = await db.collection("users").findOne({firstName, password});

console.log(matchUser)
if (matchUser) {
  return res.status(200).json({ status: 200, message: "logged in", data: matchUser });
} else {
  return res
    .status(400)
    .json({ status: 400, message: "user not found" });
}    } catch (err){console.log(err)}

    
};


//////update profile

const updateProfile = async (req, res) => {
  const { _id } = req.params;
  try {
    const {
      firstName,
      lastName, 
      email, 
      password,
      favourites,

    } = req.body;


    const client = new MongoClient(MONGO_URI, options);
    await client.connect();
    const db = client.db("AudioPlacebo");

    const updateItem = await db.collection("users").updateOne(
      { id: _id },
      {
        $set: {
          firstName,
          lastName, 
          email, 
          password,
          favourites,
        },
      }
    );
    await client.close();
    if (updateProfile) {
      return res
        .status(200)
        .json({ status: 200, message: "success", data: updateItem });
    } else {
      res.status(400).json({ status: 400, message: "wasn't able to update" });
    }
  } catch (err) {
    res.status(500).json({ status: 500, mesage: "error", data: req.params });
  }
};



  //getPlacebo

  const getPlacebo = async (req, res) => {

    function waitForAllUploads(id, err, image) {
      uploads[id] = image;
      var ids = Object.keys(uploads);
      if (ids.length === 6) {
        console.log();
        console.log('**  uploaded all files (' + ids.join(',') + ') to cloudinary');
      }
    }

// function upload(file: string, options?: UploadApiOptions, callback?: UploadResponseCallback): Promise<UploadApiResponse>;

  cloudinary.uploader.upload('https://res.cloudinary.com/df6wmqnl6/image/upload/v1654262632/cld-sample-5.jpg', 
  { tags: 'basic_sample' }, function (err, image) {
    console.log();
    console.log("** File Upload");
    if (err) { console.warn(err); }
    console.log("* public_id for the uploaded image is generated by Cloudinary's service.");
    console.log("* " + image.public_id);
    console.log("* " + image.url);
    waitForAllUploads("basic_sample", err, image);


  });
  }

  module.exports = {addUser, getPlacebo, getUserByPassword,  updateProfile, getUserById}